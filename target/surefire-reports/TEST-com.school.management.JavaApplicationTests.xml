<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.school.management.JavaApplicationTests" time="3.089" tests="1" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="23"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/mariohorga/Documents/Progetti/private-school-backend/target/test-classes:/Users/mariohorga/Documents/Progetti/private-school-backend/target/classes:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.1.5/spring-boot-starter-data-jpa-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.1.5/spring-boot-starter-aop-3.1.5.jar:/Users/mariohorga/.m2/repository/org/aspectj/aspectjweaver/1.9.20/aspectjweaver-1.9.20.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.1.5/spring-boot-starter-jdbc-3.1.5.jar:/Users/mariohorga/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-jdbc/6.0.13/spring-jdbc-6.0.13.jar:/Users/mariohorga/.m2/repository/org/hibernate/orm/hibernate-core/6.2.13.Final/hibernate-core-6.2.13.Final.jar:/Users/mariohorga/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/mariohorga/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/mariohorga/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/mariohorga/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/mariohorga/.m2/repository/io/smallrye/jandex/3.0.5/jandex-3.0.5.jar:/Users/mariohorga/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/Users/mariohorga/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.3/jaxb-runtime-4.0.3.jar:/Users/mariohorga/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.3/jaxb-core-4.0.3.jar:/Users/mariohorga/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/mariohorga/.m2/repository/org/glassfish/jaxb/txw2/4.0.3/txw2-4.0.3.jar:/Users/mariohorga/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/mariohorga/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/mariohorga/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/mariohorga/.m2/repository/org/springframework/data/spring-data-jpa/3.1.5/spring-data-jpa-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/data/spring-data-commons/3.1.5/spring-data-commons-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-orm/6.0.13/spring-orm-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-context/6.0.13/spring-context-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-tx/6.0.13/spring-tx-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-beans/6.0.13/spring-beans-6.0.13.jar:/Users/mariohorga/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/mariohorga/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-aspects/6.0.13/spring-aspects-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.1.5/spring-boot-starter-security-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter/3.1.5/spring-boot-starter-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.1.5/spring-boot-starter-logging-3.1.5.jar:/Users/mariohorga/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/mariohorga/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/mariohorga/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.20.0/log4j-to-slf4j-2.20.0.jar:/Users/mariohorga/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/mariohorga/.m2/repository/org/yaml/snakeyaml/1.33/snakeyaml-1.33.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-aop/6.0.13/spring-aop-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-config/6.1.5/spring-security-config-6.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-web/6.1.5/spring-security-web-6.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-expression/6.0.13/spring-expression-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.1.5/spring-boot-starter-validation-3.1.5.jar:/Users/mariohorga/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.15/tomcat-embed-el-10.1.15.jar:/Users/mariohorga/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/mariohorga/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.1.5/spring-boot-starter-web-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.1.5/spring-boot-starter-json-3.1.5.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.1.5/spring-boot-starter-tomcat-3.1.5.jar:/Users/mariohorga/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.15/tomcat-embed-core-10.1.15.jar:/Users/mariohorga/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.15/tomcat-embed-websocket-10.1.15.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-web/6.0.13/spring-web-6.0.13.jar:/Users/mariohorga/.m2/repository/io/micrometer/micrometer-observation/1.11.5/micrometer-observation-1.11.5.jar:/Users/mariohorga/.m2/repository/io/micrometer/micrometer-commons/1.11.5/micrometer-commons-1.11.5.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-webmvc/6.0.13/spring-webmvc-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-devtools/3.1.5/spring-boot-devtools-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot/3.1.5/spring-boot-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.1.5/spring-boot-autoconfigure-3.1.5.jar:/Users/mariohorga/.m2/repository/org/projectlombok/lombok/1.18.28/lombok-1.18.28.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.1.5/spring-boot-starter-test-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-test/3.1.5/spring-boot-test-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.1.5/spring-boot-test-autoconfigure-3.1.5.jar:/Users/mariohorga/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/mariohorga/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/mariohorga/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/mariohorga/.m2/repository/net/minidev/json-smart/2.4.11/json-smart-2.4.11.jar:/Users/mariohorga/.m2/repository/net/minidev/accessors-smart/2.4.11/accessors-smart-2.4.11.jar:/Users/mariohorga/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/mariohorga/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/mariohorga/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/mariohorga/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/mariohorga/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-core/6.0.13/spring-core-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-jcl/6.0.13/spring-jcl-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-test/6.0.13/spring-test-6.0.13.jar:/Users/mariohorga/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-test/6.1.5/spring-security-test-6.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-core/6.1.5/spring-security-core-6.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-crypto/6.1.5/spring-security-crypto-6.1.5.jar:/Users/mariohorga/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.0/junit-jupiter-5.10.0.jar:/Users/mariohorga/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.3/junit-jupiter-api-5.9.3.jar:/Users/mariohorga/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/mariohorga/.m2/repository/org/junit/platform/junit-platform-commons/1.9.3/junit-platform-commons-1.9.3.jar:/Users/mariohorga/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/mariohorga/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.9.3/junit-jupiter-params-5.9.3.jar:/Users/mariohorga/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.3/junit-jupiter-engine-5.9.3.jar:/Users/mariohorga/.m2/repository/org/junit/platform/junit-platform-engine/1.9.3/junit-platform-engine-1.9.3.jar:/Users/mariohorga/.m2/repository/org/mockito/mockito-core/5.11.0/mockito-core-5.11.0.jar:/Users/mariohorga/.m2/repository/net/bytebuddy/byte-buddy/1.14.9/byte-buddy-1.14.9.jar:/Users/mariohorga/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.9/byte-buddy-agent-1.14.9.jar:/Users/mariohorga/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/mariohorga/.m2/repository/org/mockito/mockito-junit-jupiter/5.11.0/mockito-junit-jupiter-5.11.0.jar:/Users/mariohorga/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/mariohorga/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/mariohorga/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/mariohorga/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/mariohorga/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/mariohorga/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/mariohorga/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar:/Users/mariohorga/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/mariohorga/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/mariohorga/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-csv/1.10.0/commons-csv-1.10.0.jar:/Users/mariohorga/.m2/repository/com/github/librepdf/openpdf/1.3.30/openpdf-1.3.30.jar:/Users/mariohorga/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/mariohorga/.m2/repository/org/apache/poi/poi-ooxml/5.2.3/poi-ooxml-5.2.3.jar:/Users/mariohorga/.m2/repository/org/apache/poi/poi/5.2.3/poi-5.2.3.jar:/Users/mariohorga/.m2/repository/commons-codec/commons-codec/1.15/commons-codec-1.15.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/Users/mariohorga/.m2/repository/com/zaxxer/SparseBitSet/1.2/SparseBitSet-1.2.jar:/Users/mariohorga/.m2/repository/org/apache/poi/poi-ooxml-lite/5.2.3/poi-ooxml-lite-5.2.3.jar:/Users/mariohorga/.m2/repository/org/apache/xmlbeans/xmlbeans/5.1.1/xmlbeans-5.1.1.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar:/Users/mariohorga/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/mariohorga/.m2/repository/com/github/virtuald/curvesapi/1.07/curvesapi-1.07.jar:/Users/mariohorga/.m2/repository/org/apache/logging/log4j/log4j-api/2.20.0/log4j-api-2.20.0.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/Users/mariohorga/.m2/repository/com/mysql/mysql-connector-j/8.0.33/mysql-connector-j-8.0.33.jar:"/>
    <property name="java.vm.vendor" value="Homebrew"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="user.timezone" value="Europe/Rome"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="23"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="IT"/>
    <property name="sun.boot.library.path" value="/opt/homebrew/Cellar/openjdk/23.0.2/libexec/openjdk.jdk/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/mariohorga/Documents/Progetti/private-school-backend/target/surefire/surefirebooter-20250428214950739_3.jar /Users/mariohorga/Documents/Progetti/private-school-backend/target/surefire 2025-04-28T21-49-50_702-jvmRun1 surefire-20250428214950739_1tmp surefire_0-20250428214950739_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/mariohorga/Documents/Progetti/private-school-backend/target/test-classes:/Users/mariohorga/Documents/Progetti/private-school-backend/target/classes:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.1.5/spring-boot-starter-data-jpa-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.1.5/spring-boot-starter-aop-3.1.5.jar:/Users/mariohorga/.m2/repository/org/aspectj/aspectjweaver/1.9.20/aspectjweaver-1.9.20.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.1.5/spring-boot-starter-jdbc-3.1.5.jar:/Users/mariohorga/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-jdbc/6.0.13/spring-jdbc-6.0.13.jar:/Users/mariohorga/.m2/repository/org/hibernate/orm/hibernate-core/6.2.13.Final/hibernate-core-6.2.13.Final.jar:/Users/mariohorga/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/mariohorga/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/mariohorga/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/mariohorga/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/mariohorga/.m2/repository/io/smallrye/jandex/3.0.5/jandex-3.0.5.jar:/Users/mariohorga/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/Users/mariohorga/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.3/jaxb-runtime-4.0.3.jar:/Users/mariohorga/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.3/jaxb-core-4.0.3.jar:/Users/mariohorga/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/mariohorga/.m2/repository/org/glassfish/jaxb/txw2/4.0.3/txw2-4.0.3.jar:/Users/mariohorga/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/mariohorga/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/mariohorga/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/mariohorga/.m2/repository/org/springframework/data/spring-data-jpa/3.1.5/spring-data-jpa-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/data/spring-data-commons/3.1.5/spring-data-commons-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-orm/6.0.13/spring-orm-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-context/6.0.13/spring-context-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-tx/6.0.13/spring-tx-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-beans/6.0.13/spring-beans-6.0.13.jar:/Users/mariohorga/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/mariohorga/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-aspects/6.0.13/spring-aspects-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.1.5/spring-boot-starter-security-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter/3.1.5/spring-boot-starter-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.1.5/spring-boot-starter-logging-3.1.5.jar:/Users/mariohorga/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/mariohorga/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/mariohorga/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.20.0/log4j-to-slf4j-2.20.0.jar:/Users/mariohorga/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/mariohorga/.m2/repository/org/yaml/snakeyaml/1.33/snakeyaml-1.33.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-aop/6.0.13/spring-aop-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-config/6.1.5/spring-security-config-6.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-web/6.1.5/spring-security-web-6.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-expression/6.0.13/spring-expression-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.1.5/spring-boot-starter-validation-3.1.5.jar:/Users/mariohorga/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.15/tomcat-embed-el-10.1.15.jar:/Users/mariohorga/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/mariohorga/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.1.5/spring-boot-starter-web-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.1.5/spring-boot-starter-json-3.1.5.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.1.5/spring-boot-starter-tomcat-3.1.5.jar:/Users/mariohorga/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.15/tomcat-embed-core-10.1.15.jar:/Users/mariohorga/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.15/tomcat-embed-websocket-10.1.15.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-web/6.0.13/spring-web-6.0.13.jar:/Users/mariohorga/.m2/repository/io/micrometer/micrometer-observation/1.11.5/micrometer-observation-1.11.5.jar:/Users/mariohorga/.m2/repository/io/micrometer/micrometer-commons/1.11.5/micrometer-commons-1.11.5.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-webmvc/6.0.13/spring-webmvc-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-devtools/3.1.5/spring-boot-devtools-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot/3.1.5/spring-boot-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.1.5/spring-boot-autoconfigure-3.1.5.jar:/Users/mariohorga/.m2/repository/org/projectlombok/lombok/1.18.28/lombok-1.18.28.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.1.5/spring-boot-starter-test-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-test/3.1.5/spring-boot-test-3.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.1.5/spring-boot-test-autoconfigure-3.1.5.jar:/Users/mariohorga/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/mariohorga/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/mariohorga/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/mariohorga/.m2/repository/net/minidev/json-smart/2.4.11/json-smart-2.4.11.jar:/Users/mariohorga/.m2/repository/net/minidev/accessors-smart/2.4.11/accessors-smart-2.4.11.jar:/Users/mariohorga/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/mariohorga/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/mariohorga/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/mariohorga/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/mariohorga/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-core/6.0.13/spring-core-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-jcl/6.0.13/spring-jcl-6.0.13.jar:/Users/mariohorga/.m2/repository/org/springframework/spring-test/6.0.13/spring-test-6.0.13.jar:/Users/mariohorga/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-test/6.1.5/spring-security-test-6.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-core/6.1.5/spring-security-core-6.1.5.jar:/Users/mariohorga/.m2/repository/org/springframework/security/spring-security-crypto/6.1.5/spring-security-crypto-6.1.5.jar:/Users/mariohorga/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.0/junit-jupiter-5.10.0.jar:/Users/mariohorga/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.3/junit-jupiter-api-5.9.3.jar:/Users/mariohorga/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/mariohorga/.m2/repository/org/junit/platform/junit-platform-commons/1.9.3/junit-platform-commons-1.9.3.jar:/Users/mariohorga/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/mariohorga/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.9.3/junit-jupiter-params-5.9.3.jar:/Users/mariohorga/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.3/junit-jupiter-engine-5.9.3.jar:/Users/mariohorga/.m2/repository/org/junit/platform/junit-platform-engine/1.9.3/junit-platform-engine-1.9.3.jar:/Users/mariohorga/.m2/repository/org/mockito/mockito-core/5.11.0/mockito-core-5.11.0.jar:/Users/mariohorga/.m2/repository/net/bytebuddy/byte-buddy/1.14.9/byte-buddy-1.14.9.jar:/Users/mariohorga/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.9/byte-buddy-agent-1.14.9.jar:/Users/mariohorga/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/mariohorga/.m2/repository/org/mockito/mockito-junit-jupiter/5.11.0/mockito-junit-jupiter-5.11.0.jar:/Users/mariohorga/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/mariohorga/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/mariohorga/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/mariohorga/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/mariohorga/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/mariohorga/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/mariohorga/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar:/Users/mariohorga/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/mariohorga/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/mariohorga/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/mariohorga/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-csv/1.10.0/commons-csv-1.10.0.jar:/Users/mariohorga/.m2/repository/com/github/librepdf/openpdf/1.3.30/openpdf-1.3.30.jar:/Users/mariohorga/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/mariohorga/.m2/repository/org/apache/poi/poi-ooxml/5.2.3/poi-ooxml-5.2.3.jar:/Users/mariohorga/.m2/repository/org/apache/poi/poi/5.2.3/poi-5.2.3.jar:/Users/mariohorga/.m2/repository/commons-codec/commons-codec/1.15/commons-codec-1.15.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/Users/mariohorga/.m2/repository/com/zaxxer/SparseBitSet/1.2/SparseBitSet-1.2.jar:/Users/mariohorga/.m2/repository/org/apache/poi/poi-ooxml-lite/5.2.3/poi-ooxml-lite-5.2.3.jar:/Users/mariohorga/.m2/repository/org/apache/xmlbeans/xmlbeans/5.1.1/xmlbeans-5.1.1.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar:/Users/mariohorga/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/mariohorga/.m2/repository/com/github/virtuald/curvesapi/1.07/curvesapi-1.07.jar:/Users/mariohorga/.m2/repository/org/apache/logging/log4j/log4j-api/2.20.0/log4j-api-2.20.0.jar:/Users/mariohorga/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/Users/mariohorga/.m2/repository/com/mysql/mysql-connector-j/8.0.33/mysql-connector-j-8.0.33.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/mariohorga"/>
    <property name="user.language" value="it"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-01-21"/>
    <property name="java.home" value="/opt/homebrew/Cellar/openjdk/23.0.2/libexec/openjdk.jdk/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/mariohorga/Documents/Progetti/private-school-backend"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/mariohorga/Documents/Progetti/private-school-backend/target/surefire/surefirebooter-20250428214950739_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="23.0.2"/>
    <property name="user.name" value="mariohorga"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.4.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Homebrew"/>
    <property name="localRepository" value="/Users/mariohorga/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="java.io.tmpdir" value="/var/folders/dc/6zzfwp6x3vd1wyt92llvq2tw0000gn/T/"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="23.0.2"/>
    <property name="user.dir" value="/Users/mariohorga/Documents/Progetti/private-school-backend"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="80125"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/mariohorga/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Homebrew"/>
    <property name="java.vm.version" value="23.0.2"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="67.0"/>
  </properties>
  <testcase name="contextLoads" classname="com.school.management.JavaApplicationTests" time="0.317">
    <system-out><![CDATA[21:49:51.043 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.school.management.JavaApplicationTests]: JavaApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
21:49:51.084 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.school.management.JavaApplication for test class com.school.management.JavaApplicationTests
21:49:51.133 [main] INFO org.springframework.boot.devtools.restart.RestartApplicationListener -- Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
&amp#27;[32m :: Spring Boot :: &amp#27;[39m              &amp#27;[2m (v3.1.5)&amp#27;[0;39m

&amp#27;[2m2025-04-28T21:49:51.208+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mc.s.management.JavaApplicationTests     &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Starting JavaApplicationTests using Java 23.0.2 with PID 80125 (started by mariohorga in /Users/mariohorga/Documents/Progetti/private-school-backend)
&amp#27;[2m2025-04-28T21:49:51.209+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mc.s.management.JavaApplicationTests     &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m No active profile set, falling back to 1 default profile: "default"
&amp#27;[2m2025-04-28T21:49:51.485+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36m.s.d.r.c.RepositoryConfigurationDelegate&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Bootstrapping Spring Data JPA repositories in DEFAULT mode.
&amp#27;[2m2025-04-28T21:49:51.511+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36m.s.d.r.c.RepositoryConfigurationDelegate&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Finished Spring Data repository scanning in 23 ms. Found 10 JPA repository interfaces.
&amp#27;[2m2025-04-28T21:49:51.706+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mo.hibernate.jpa.internal.util.LogHelper &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000204: Processing PersistenceUnitInfo [name: default]
&amp#27;[2m2025-04-28T21:49:51.728+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36morg.hibernate.Version                   &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000412: Hibernate ORM core version 6.2.13.Final
&amp#27;[2m2025-04-28T21:49:51.729+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36morg.hibernate.cfg.Environment           &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000406: Using bytecode reflection optimizer
&amp#27;[2m2025-04-28T21:49:51.831+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mo.s.o.j.p.SpringPersistenceUnitInfo     &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m No LoadTimeWeaver setup: ignoring JPA class transformer
&amp#27;[2m2025-04-28T21:49:51.841+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mcom.zaxxer.hikari.HikariDataSource      &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HikariPool-1 - Starting...
&amp#27;[2m2025-04-28T21:49:51.915+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mcom.zaxxer.hikari.pool.HikariPool       &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@51132514
&amp#27;[2m2025-04-28T21:49:51.916+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mcom.zaxxer.hikari.HikariDataSource      &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HikariPool-1 - Start completed.
&amp#27;[2m2025-04-28T21:49:51.934+02:00&amp#27;[0;39m &amp#27;[33m WARN&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36morg.hibernate.orm.deprecation           &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
&amp#27;[2m2025-04-28T21:49:51.935+02:00&amp#27;[0;39m &amp#27;[33m WARN&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36morg.hibernate.orm.deprecation           &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
&amp#27;[2m2025-04-28T21:49:52.320+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mo.h.e.t.j.p.i.JtaPlatformInitiator      &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
&amp#27;[2m2025-04-28T21:49:52.408+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mj.LocalContainerEntityManagerFactoryBean&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Initialized JPA EntityManagerFactory for persistence unit 'default'
&amp#27;[2m2025-04-28T21:49:52.750+02:00&amp#27;[0;39m &amp#27;[33m WARN&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mJpaBaseConfiguration$JpaWebConfiguration&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
&amp#27;[2m2025-04-28T21:49:52.779+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mo.s.s.web.DefaultSecurityFilterChain    &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4468ced2, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@21f421b8, org.springframework.security.web.context.SecurityContextHolderFilter@65029fc, org.springframework.security.web.header.HeaderWriterFilter@7a0f1f9d, org.springframework.security.web.authentication.logout.LogoutFilter@2d6e09f0, com.school.management.auth.security.AuthTokenFilter@799557c8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3c6e407, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2f650dae, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4e3bc13b, org.springframework.security.web.session.SessionManagementFilter@4830c979, org.springframework.security.web.access.ExceptionTranslationFilter@6764201e, org.springframework.security.web.access.intercept.AuthorizationFilter@334ac669]
&amp#27;[2m2025-04-28T21:49:52.988+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m80125&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[36mc.s.management.JavaApplicationTests     &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Started JavaApplicationTests in 1.858 seconds (process running for 2.204)
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    insert 
    into
        utenti
        (email,password,username) 
    values
        (?,?,?)
Hibernate: 
    insert 
    into
        utente_ruoli
        (utente_id,ruolo_id) 
    values
        (?,?)
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        i1_0.studente_id,
        i1_0.id,
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.voto 
    from
        iscrizioni i1_0 
    left join
        corsi c1_0 
            on c1_0.id=i1_0.corso_id 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        i1_0.studente_id=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    update
        studenti 
    set
        auth_utente_id=?,
        cognome=?,
        data_nascita=?,
        email=?,
        nome=? 
    where
        id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    insert 
    into
        utenti
        (email,password,username) 
    values
        (?,?,?)
Hibernate: 
    insert 
    into
        utente_ruoli
        (utente_id,ruolo_id) 
    values
        (?,?)
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        i1_0.studente_id,
        i1_0.id,
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.voto 
    from
        iscrizioni i1_0 
    left join
        corsi c1_0 
            on c1_0.id=i1_0.corso_id 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        i1_0.studente_id=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    update
        studenti 
    set
        auth_utente_id=?,
        cognome=?,
        data_nascita=?,
        email=?,
        nome=? 
    where
        id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    insert 
    into
        utenti
        (email,password,username) 
    values
        (?,?,?)
Hibernate: 
    insert 
    into
        utente_ruoli
        (utente_id,ruolo_id) 
    values
        (?,?)
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        i1_0.studente_id,
        i1_0.id,
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.voto 
    from
        iscrizioni i1_0 
    left join
        corsi c1_0 
            on c1_0.id=i1_0.corso_id 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        i1_0.studente_id=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    update
        studenti 
    set
        auth_utente_id=?,
        cognome=?,
        data_nascita=?,
        email=?,
        nome=? 
    where
        id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    insert 
    into
        utenti
        (email,password,username) 
    values
        (?,?,?)
Hibernate: 
    insert 
    into
        utente_ruoli
        (utente_id,ruolo_id) 
    values
        (?,?)
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        i1_0.studente_id,
        i1_0.id,
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.voto 
    from
        iscrizioni i1_0 
    left join
        corsi c1_0 
            on c1_0.id=i1_0.corso_id 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        i1_0.studente_id=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    update
        studenti 
    set
        auth_utente_id=?,
        cognome=?,
        data_nascita=?,
        email=?,
        nome=? 
    where
        id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    insert 
    into
        utenti
        (email,password,username) 
    values
        (?,?,?)
Hibernate: 
    insert 
    into
        utente_ruoli
        (utente_id,ruolo_id) 
    values
        (?,?)
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        i1_0.studente_id,
        i1_0.id,
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.voto 
    from
        iscrizioni i1_0 
    left join
        corsi c1_0 
            on c1_0.id=i1_0.corso_id 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        i1_0.studente_id=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    update
        studenti 
    set
        auth_utente_id=?,
        cognome=?,
        data_nascita=?,
        email=?,
        nome=? 
    where
        id=?
Hibernate: 
    select
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    where
        d1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    insert 
    into
        utenti
        (email,password,username) 
    values
        (?,?,?)
Hibernate: 
    insert 
    into
        utente_ruoli
        (utente_id,ruolo_id) 
    values
        (?,?)
Hibernate: 
    select
        d1_0.id,
        a1_0.id,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    left join
        utenti a1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            d1_0.id=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    update
        docenti 
    set
        auth_utente_id=?,
        cognome=?,
        email=?,
        nome=? 
    where
        id=?
Hibernate: 
    select
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    where
        d1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    insert 
    into
        utenti
        (email,password,username) 
    values
        (?,?,?)
Hibernate: 
    insert 
    into
        utente_ruoli
        (utente_id,ruolo_id) 
    values
        (?,?)
Hibernate: 
    select
        d1_0.id,
        a1_0.id,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    left join
        utenti a1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            d1_0.id=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    update
        docenti 
    set
        auth_utente_id=?,
        cognome=?,
        email=?,
        nome=? 
    where
        id=?
Hibernate: 
    select
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    where
        d1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.email=?
Hibernate: 
    select
        a1_0.id,
        a1_0.nome 
    from
        ruoli a1_0 
    where
        a1_0.nome=?
Hibernate: 
    insert 
    into
        utenti
        (email,password,username) 
    values
        (?,?,?)
Hibernate: 
    insert 
    into
        utente_ruoli
        (utente_id,ruolo_id) 
    values
        (?,?)
Hibernate: 
    select
        d1_0.id,
        a1_0.id,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    left join
        utenti a1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            d1_0.id=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    update
        docenti 
    set
        auth_utente_id=?,
        cognome=?,
        email=?,
        nome=? 
    where
        id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.email,
        a1_0.password,
        a1_0.username 
    from
        utenti a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        d1_0.id,
        a1_0.id,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    left join
        utenti a1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            d1_0.auth_utente_id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.auth_utente_id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    where
        s1_0.email=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    select
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    where
        d1_0.email=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    select
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    where
        d1_0.email=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    select
        d1_0.id,
        d1_0.auth_utente_id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    where
        d1_0.email=?
Hibernate: 
    select
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username 
    from
        utenti a1_0 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano 
    from
        aule a1_0 
    where
        a1_0.nome=?
Hibernate: 
    select
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano 
    from
        aule a1_0 
    where
        a1_0.nome=?
Hibernate: 
    select
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano 
    from
        aule a1_0 
    where
        a1_0.nome=?
Hibernate: 
    select
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        percorsi p1_0 
    where
        p1_0.nome=?
Hibernate: 
    select
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        percorsi p1_0 
    where
        p1_0.nome=?
Hibernate: 
    select
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        percorsi p1_0 
    where
        p1_0.nome=?
Hibernate: 
    select
        c1_0.id,
        c1_0.aula_id,
        c1_0.data_fine,
        c1_0.data_inizio,
        c1_0.docente_id,
        c1_0.durata_ore,
        c1_0.nome,
        c1_0.percorso_id 
    from
        corsi c1_0 
    where
        c1_0.nome=?
Hibernate: 
    select
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano 
    from
        aule a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        d1_0.id,
        a1_0.id,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    left join
        utenti a1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            d1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        percorsi p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.aula_id,
        c1_0.data_fine,
        c1_0.data_inizio,
        c1_0.docente_id,
        c1_0.durata_ore,
        c1_0.nome,
        c1_0.percorso_id 
    from
        corsi c1_0 
    where
        c1_0.nome=?
Hibernate: 
    select
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano 
    from
        aule a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        d1_0.id,
        a1_0.id,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    left join
        utenti a1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            d1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        percorsi p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.aula_id,
        c1_0.data_fine,
        c1_0.data_inizio,
        c1_0.docente_id,
        c1_0.durata_ore,
        c1_0.nome,
        c1_0.percorso_id 
    from
        corsi c1_0 
    where
        c1_0.nome=?
Hibernate: 
    select
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano 
    from
        aule a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        d1_0.id,
        a1_0.id,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    left join
        utenti a1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            d1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        percorsi p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.aula_id,
        c1_0.data_fine,
        c1_0.data_inizio,
        c1_0.docente_id,
        c1_0.durata_ore,
        c1_0.nome,
        c1_0.percorso_id 
    from
        corsi c1_0 
    where
        c1_0.nome=?
Hibernate: 
    select
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano 
    from
        aule a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        d1_0.id,
        a1_0.id,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        s1_0.id,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome,
        a1_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome 
    from
        docenti d1_0 
    left join
        utenti a1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        left join
            studenti s1_0 
                on a1_0.id=s1_0.auth_utente_id 
        where
            d1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        percorsi p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        m1_0.id,
        m1_0.corso_id,
        m1_0.descrizione,
        m1_0.tipo,
        m1_0.titolo 
    from
        materiale m1_0 
    where
        m1_0.titolo=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        m1_0.id,
        m1_0.corso_id,
        m1_0.descrizione,
        m1_0.tipo,
        m1_0.titolo 
    from
        materiale m1_0 
    where
        m1_0.titolo=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        m1_0.id,
        m1_0.corso_id,
        m1_0.descrizione,
        m1_0.tipo,
        m1_0.titolo 
    from
        materiale m1_0 
    where
        m1_0.titolo=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        m1_0.id,
        m1_0.corso_id,
        m1_0.descrizione,
        m1_0.tipo,
        m1_0.titolo 
    from
        materiale m1_0 
    where
        m1_0.titolo=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        e1_0.id,
        e1_0.corso_id,
        e1_0.data,
        e1_0.nome 
    from
        esami e1_0 
    where
        e1_0.nome=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        e1_0.id,
        e1_0.corso_id,
        e1_0.data,
        e1_0.nome 
    from
        esami e1_0 
    where
        e1_0.nome=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        e1_0.id,
        e1_0.corso_id,
        e1_0.data,
        e1_0.nome 
    from
        esami e1_0 
    where
        e1_0.nome=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        e1_0.id,
        e1_0.corso_id,
        e1_0.data,
        e1_0.nome 
    from
        esami e1_0 
    where
        e1_0.nome=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        i1_0.id,
        i1_0.corso_id,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.studente_id,
        i1_0.voto 
    from
        iscrizioni i1_0 
    where
        i1_0.studente_id=? 
        and i1_0.corso_id=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        i1_0.id,
        i1_0.corso_id,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.studente_id,
        i1_0.voto 
    from
        iscrizioni i1_0 
    where
        i1_0.studente_id=? 
        and i1_0.corso_id=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        i1_0.id,
        i1_0.corso_id,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.studente_id,
        i1_0.voto 
    from
        iscrizioni i1_0 
    where
        i1_0.studente_id=? 
        and i1_0.corso_id=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        i1_0.id,
        i1_0.corso_id,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.studente_id,
        i1_0.voto 
    from
        iscrizioni i1_0 
    where
        i1_0.studente_id=? 
        and i1_0.corso_id=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        i1_0.id,
        i1_0.corso_id,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.studente_id,
        i1_0.voto 
    from
        iscrizioni i1_0 
    where
        i1_0.studente_id=? 
        and i1_0.corso_id=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
Hibernate: 
    select
        i1_0.id,
        i1_0.corso_id,
        i1_0.data_iscrizione,
        i1_0.stato,
        i1_0.studente_id,
        i1_0.voto 
    from
        iscrizioni i1_0 
    where
        i1_0.studente_id=? 
        and i1_0.corso_id=?
Hibernate: 
    select
        c1_0.id,
        a1_0.id,
        a1_0.capienza,
        a1_0.nome,
        a1_0.piano,
        c1_0.data_fine,
        c1_0.data_inizio,
        d1_0.id,
        a2_0.id,
        a2_0.email,
        a2_0.password,
        a2_0.username,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        c1_0.durata_ore,
        c1_0.nome,
        p1_0.id,
        p1_0.descrizione,
        p1_0.nome 
    from
        corsi c1_0 
    left join
        aule a1_0 
            on a1_0.id=c1_0.aula_id 
    left join
        docenti d1_0 
            on d1_0.id=c1_0.docente_id 
    left join
        utenti a2_0 
            on a2_0.id=d1_0.auth_utente_id 
    left join
        percorsi p1_0 
            on p1_0.id=c1_0.percorso_id 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.auth_utente_id=?
Hibernate: 
    select
        s1_0.id,
        a1_0.id,
        d1_0.id,
        d1_0.cognome,
        d1_0.email,
        d1_0.nome,
        a1_0.email,
        a1_0.password,
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome,
        a1_0.username,
        s1_0.cognome,
        s1_0.data_nascita,
        s1_0.email,
        s1_0.nome 
    from
        studenti s1_0 
    left join
        utenti a1_0 
            on a1_0.id=s1_0.auth_utente_id 
    left join
        docenti d1_0 
            on a1_0.id=d1_0.auth_utente_id 
    left join
        (utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id) 
                on a1_0.id=r1_0.utente_id 
        where
            s1_0.id=?
Hibernate: 
    select
        r1_0.utente_id,
        r1_1.id,
        r1_1.nome 
    from
        utente_ruoli r1_0 
    join
        ruoli r1_1 
            on r1_1.id=r1_0.ruolo_id 
    where
        r1_0.utente_id=?
]]></system-out>
    <system-err><![CDATA[WARNING: A Java agent has been loaded dynamically (/Users/mariohorga/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.9/byte-buddy-agent-1.14.9.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
]]></system-err>
  </testcase>
</testsuite>